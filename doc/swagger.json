{
  "openapi": "3.0.0",
  "info": {
    "title": "DartPointAds API Documentation",
    "version": "1.0.0",
    "contact": {
      "name": "Contact: Abdullah",
      "url": "https://github.com/abdulloooh"
    }
  },
  "servers": [
    {
      "url": "http://localhost:4000/api",
      "description": "Development server"
    },
    {
      "url": "https://dartpa.herokuapp.com/api",
      "description": "Production server"
    }
  ],
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2MDJmZjYwZjU1ZGViNDAwMTVmMWYzZmQiLCJpYXQiOjE2MTM3NTU5MTksImV4cCI6MTYxNDM2MDcxOX0.P - MPAAxgW_8bzLM2hkSWmQQ0DaevVEE - 36UZrocCTI4"
      }
    },
    "schemas": {
      "unauthorized": {
        "type": "string",
        "example": "Unauthorized"
      },
      "internal_error": {
        "type": "object",
        "properties": {
          "success": { "type": "boolean", "example": false },
          "msg": {
            "type": "string",
            "example": "Server temporarily unavailable, please try again later"
          }
        }
      }
    },
    "requestBodies": {
      "userRegister": {
        "type": "object",
        "required": ["email", "phone", "password"],
        "properties": {
          "username": { "type": "string", "example": "abdul" },
          "email": {
            "type": "string",
            "example": "abdullahakinwumi@gmail.com"
          },
          "phone": { "type": "string", "example": "09036058937" },
          "password": { "type": "string", "example": "password" }
        }
      },
      "userLogin": {
        "type": "object",
        "required": ["email", "password"],
        "properties": {
          "email": {
            "type": "string",
            "example": "abdullahakinwumi@gmail.com"
          },
          "password": { "type": "string", "example": "password" }
        }
      },
      "confirmOtp": {
        "type": "object",
        "properties": {
          "otp": { "type": "string", "example": "767287" },
          "userPayload": {
            "type": "string",
            "example": "67d88c94301ecd43717e0db6e56b48d328a87a42e4c121110f1c64707692c0d3f27a104bdfba9e4ebf05e526a09a0fc7987"
          }
        }
      },
      "wallet": {
        "type": "object",
        "properties": {
          "amount": { "type": "number", "example": 100 }
        }
      },
      "filterReq": {
        "type": "object",
        "properties": {
          "filter": {
            "type": "object",
            "properties": {
              "religion": {
                "type": "array",
                "items": { "type": "string" }
              },
              "department": {
                "type": "array",
                "items": { "type": "string" }
              }
            }
          }
        }
      },
      "sender": {
        "type": "object",
        "properties": {
          "sender": { "type": "string", "example": "DartPointAd" }
        }
      }
    },
    "responses": {
      "otpFailed": {
        "type": "object",
        "required": ["success", "msg"],
        "properties": {
          "success": { "type": "boolean", "example": false },
          "field": { "type": "string", "example": "otp" },
          "msg": { "type": "string", "example": "otp expired" }
        }
      },
      "senderErr": {
        "type": "object",
        "required": ["success", "msg"],
        "properties": {
          "success": { "type": "boolean", "example": false },
          "field": { "type": "string", "example": "sender" },
          "msg": { "type": "string", "example": "Sender already registered" }
        }
      },
      "authFailed": {
        "type": "object",
        "required": ["success", "msg"],
        "properties": {
          "success": { "type": "boolean", "example": false },
          "field": { "type": "string", "example": "email" },
          "msg": { "type": "string", "example": "use google option to sign in" }
        }
      },
      "filtererror": {
        "type": "object",
        "properties": {
          "success": { "type": "boolean", "example": false },
          "msg": {
            "type": "string",
            "example": "Details with specified filter not found"
          }
        }
      },
      "senderRes": {
        "type": "object",
        "required": ["success", "sender"],
        "properties": {
          "success": { "type": "boolean", "example": true },
          "msg": {
            "type": "string",
            "example": "Sender queued for registration"
          },
          "sender": { "type": "string", "example": "DartPointAd" }
        }
      }
    },
    "examples": {
      "isInvalidData": {
        "success": false,
        "field": "username",
        "msg": "\"username\" length must be at least 3 characters long"
      },
      "otpSent": {
        "success": true,
        "userPayload": "67d88ca104bdfba9e4ebf057f0f47adcdf152bd58876081d2eeba37f8365c99fb4aead8381c93ac5c0eb8ee87717d7b8a9286d479410402c3b303ec89f584fa31a97d4751a69ee5064d440aa7e3f4a7838245",
        "expiresIn": 5,
        "unit": "m"
      },
      "userObject": {
        "success": true,
        "user": {
          "username": "abdullah oladipo",
          "email": "abdulllooohhh@gmail.com",
          "avatar": "https://lh3.googleusercontent.com/a-/AOh14GigdT2x1bWIlwYiHD7ipUHFQ_69R5_iZYb6xYNt=s96-c",
          "wallet": 0
        }
      },
      "userWithToken": {
        "success": true,
        "user": {
          "username": "abdullah oladipo",
          "email": "abdulllooohhh@gmail.com",
          "avatar": "https://lh3.googleusercontent.com/a-/AOh14GigdT2x1bWIlwYiHD7ipUHFQ_69R5_iZYb6xYNt=s96-c",
          "wallet": 0
        },
        "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2MDMzN2YzY2JiOTQxMDMzNGE1NDU5NTciLCJpYXQiOjE2MTM5ODc2NDQsImV4cCI6MTYxNDU5MjQ0NH0.R89xLQ1UFIAoOoBxoF2GKNCarTBNb74xZKtchtCraBc"
      },
      "paymentUrl": {
        "success": true,
        "payment_link": "https://checkout-testing.herokuapp.com/v3/hosted/pay/5e285d8245e0741b922e"
      },
      "filterRes": {
        "success": true,
        "qty": 100
      }
    }
  },
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "paths": {
    "/users/register": {
      "post": {
        "summary": "Register and get mailed token",
        "tags": ["user"],
        "security": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/requestBodies/userRegister"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Reg failed, perhaps invalid or existing data",
            "content": {
              "application/json": {
                "examples": {
                  "isInvalidData": {
                    "$ref": "#/components/examples/isInvalidData"
                  },
                  "isExist": {
                    "$ref": "#/components/examples/isInvalidData"
                  }
                }
              }
            }
          },
          "200": {
            "description": "Successful, OTP sent",
            "content": {
              "application/json": {
                "examples": {
                  "otpSent": {
                    "$ref": "#/components/examples/otpSent"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/create": {
      "post": {
        "summary": "Confirm otp and create a new user",
        "tags": ["user"],
        "operationId": "confirmOtp",
        "security": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/requestBodies/confirmOtp"
              }
            }
          }
        },
        "responses": {
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/otpFailed"
                }
              }
            }
          },
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "userObject": {
                    "$ref": "#/components/examples/userWithToken"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/me": {
      "get": {
        "summary": "Get user",
        "tags": ["user"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "userObject": {
                    "$ref": "#/components/examples/userObject"
                  }
                }
              }
            }
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/unauthorized"
                }
              }
            }
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "summary": "Log in with email and password",
        "tags": ["auth"],
        "security": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/requestBodies/userLogin"
              }
            }
          }
        },
        "responses": {
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/authFailed"
                }
              }
            }
          },
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "userObject": {
                    "$ref": "#/components/examples/userWithToken"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/auth/google": {
      "get": {
        "summary": "Authenticate with google",
        "tags": ["auth"],
        "security": [],
        "responses": {
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/authFailed"
                }
              }
            }
          },
          "302": {
            "description": "Redirect user to client but with jwt token as query string e.g https://ourwebsite.com/?token=ajhdy8dh8a8# || Simply check if a token comes on `/` router, strip the ending `#`, save it and handle the rest"
          }
        }
      }
    },
    "/pay/fw": {
      "post": {
        "summary": "Wallet Deposit with Flutterwave, Redirect user to the payment link if status is success",
        "tags": ["wallet"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/requestBodies/wallet"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "success": {
                    "$ref": "#/components/examples/paymentUrl"
                  }
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/otpFailed"
                }
              }
            }
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/otpFailed"
                }
              }
            }
          }
        }
      }
    },
    "/ads/filterphone": {
      "post": {
        "summary": "Get qty of clean phone numbers corresponding to a filter. No filter implies fetch all, send filter only for needed, e.g if filtering is needed for  religion but not faculty, dont add faculty to filter keys at all",
        "tags": ["filter"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/requestBodies/filterReq"
              },
              "example": {
                "filter": {
                  "department": ["FST", "AEC"],
                  "level": ["1"],
                  "religion": ["Muslim"]
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "success": {
                    "$ref": "#/components/examples/filterRes"
                  }
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/filtererror"
                }
              }
            }
          }
        }
      }
    },
    "/ads/filteremail": {
      "post": {
        "summary": "Get qty of clean email corresponding to a filter. No filter implies fetch all, send filter only for needed, e.g if filtering is needed for  religion but not faculty, dont add faculty to filter keys at all",
        "tags": ["filter"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/requestBodies/filterReq"
              },
              "example": {
                "filter": {
                  "department": ["FST", "AEC"],
                  "level": ["1"],
                  "religion": ["Muslim"]
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "success": {
                    "$ref": "#/components/examples/filterRes"
                  }
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/filtererror"
                }
              }
            }
          }
        }
      }
    },
    "/ads/check_sender": {
      "post": {
        "summary": "Check if a senderID is registered, max of 11 chars",
        "tags": ["senderID"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/requestBodies/sender"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/senderRes"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/senderErr"
                }
              }
            }
          }
        }
      }
    },
    "/ads/register_sender": {
      "post": {
        "summary": "Check if a senderID is registered, max of 11 chars",
        "tags": ["senderID"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/requestBodies/sender"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/senderRes"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/senderErr"
                }
              }
            }
          }
        }
      }
    }
  }
}
